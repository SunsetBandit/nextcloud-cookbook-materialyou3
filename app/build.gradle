plugins {
    id 'com.android.application'
    id 'com.google.devtools.ksp'
    id 'com.mikepenz.aboutlibraries.plugin'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id "org.sonarqube" version "3.5.0.2730"
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

sonar {
    properties {
        property "sonar.projectKey", "lneugebauer_nextcloud-cookbook"
        property "sonar.organization", "lneugebauer"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

android {
    compileSdk 34
    if (keystoreProperties.containsKey('storeFile')) {
        signingConfigs {
            upload {
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['uploadKeyAlias']
                keyPassword keystoreProperties['uploadKeyPassword']
            }
            release {
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['releaseKeyAlias']
                keyPassword keystoreProperties['releaseKeyPassword']
            }
        }
    }

    defaultConfig {
        applicationId "de.lukasneugebauer.nextcloudcookbook"
        minSdk 24
        targetSdk 34
        versionCode 38
        versionName "0.16.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
            debuggable true
        }
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions = ["version"]
    productFlavors {
        full {
            dimension "version"
            signingConfig keystoreProperties.containsKey('storeFile') ? signingConfigs.release : signingConfigs.debug
        }
        googlePlay {
            dimension "version"
            signingConfig keystoreProperties.containsKey('storeFile') ? signingConfigs.upload : signingConfigs.debug
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
        buildConfig true
    }
    bundle {
        storeArchive {
            enable = false
        }
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_compiler_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    namespace 'de.lukasneugebauer.nextcloudcookbook'
    lint {
        disable 'MissingTranslation'
    }
}

configurations {
    ktlint
}

kotlin {
    sourceSets {
        debug {
            kotlin.srcDir("build/generated/ksp/debug/kotlin")
        }
        release {
            kotlin.srcDir("build/generated/ksp/release/kotlin")
        }
    }
}

dependencies {

    ktlint('com.pinterest:ktlint:0.50.0') {
        attributes {
            attribute(Bundling.BUNDLING_ATTRIBUTE, getObjects().named(Bundling, Bundling.EXTERNAL))
        }
    }

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'

    implementation 'androidx.core:core-ktx:1.13.1'
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.8.1'
    implementation 'androidx.navigation:navigation-compose:2.7.7'
    implementation 'androidx.hilt:hilt-navigation-compose:1.2.0'
    implementation 'androidx.activity:activity-compose:1.9.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.8.1'
    implementation 'androidx.datastore:datastore-preferences:1.1.1'
    implementation 'androidx.core:core-splashscreen:1.0.1'

    implementation platform('androidx.compose:compose-bom:2024.05.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material:material'
    implementation 'androidx.compose.material:material-icons-extended'

    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"

    implementation 'com.google.code.gson:gson:2.11.0'

    implementation "com.google.accompanist:accompanist-drawablepainter:$accompanist_version"

    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation platform('com.squareup.okhttp3:okhttp-bom:4.12.0')
    implementation 'com.squareup.okhttp3:okhttp'
    implementation 'com.squareup.okhttp3:logging-interceptor'

    implementation 'io.coil-kt:coil-compose:2.6.0'

    implementation "com.dropbox.mobile.store:store4:$store_version"

    implementation 'com.jakewharton.timber:timber:5.0.1'

    implementation "com.github.alorma:compose-settings-ui:$compose_settings_version"
    implementation "com.github.alorma:compose-settings-storage-preferences:$compose_settings_version"

    implementation "io.github.raamcosta.compose-destinations:core:$compose_destinations_version"
    ksp "io.github.raamcosta.compose-destinations:ksp:$compose_destinations_version"

    implementation 'com.github.haroldadmin:NetworkResponseAdapter:5.0.0'

    implementation "com.mikepenz:aboutlibraries-core:$aboutlibs_version"
    implementation "com.mikepenz:aboutlibraries-compose:$aboutlibs_version"

    implementation 'io.github.dokar3:chiptextfield:0.6.5'

    implementation "ch.acra:acra-mail:$acra_version"
    implementation "ch.acra:acra-dialog:$acra_version"

    implementation "com.colintheshots:twain:0.3.2"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4:1.6.7'

    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.14'
}

kapt {
    correctErrorTypes true
}

tasks.register("ktlintCheck", JavaExec) {
    group = "verification"
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    mainClass = "com.pinterest.ktlint.Main"
    // see https://pinterest.github.io/ktlint/install/cli/#command-line-usage for more information
    args "src/**/*.kt", "**.kts", "!**/build/**"
}

tasks.named("check") {
    dependsOn tasks.named("ktlintCheck")
}

tasks.register("ktlintFormat", JavaExec) {
    group = "formatting"
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    mainClass = "com.pinterest.ktlint.Main"
    jvmArgs "--add-opens=java.base/java.lang=ALL-UNNAMED"
    // see https://pinterest.github.io/ktlint/install/cli/#command-line-usage for more information
    args "-F", "src/**/*.kt", "**.kts", "!**/build/**"
}